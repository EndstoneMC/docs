---
brief: True
details: True
implements: True
---
{%- filter indent(config.get('indent_level', 0), True) -%}

## <code className="doc-symbol doc-symbol-{{node.kind.value}}"/> {{node.name_long}}
{% if node.has_templateparams %}
**template &lt;{{node.templateparams}}&gt;**
{%- endif %}

{%- if node.has_base_classes %}
Bases:
{%- for base in node.base_classes -%}
{%- if base is string %} `{{base}}`{%- else %} [`{{base.name_long}}`]({{base.url}}){%- endif -%}
{{ ', ' if not loop.last else '' }}
{%- endfor -%}
{%- endif %}

{{ templateMemTab.render({'config': {}, 'node': node, 'parent': None, 'title': 'Files', 'visibility': 'public', 'kinds': ['file'], 'static': False}) }}
{{ templateMemTab.render({'config': {}, 'node': node, 'parent': None, 'title': 'Directories', 'visibility': 'public', 'kinds': ['dir'], 'static': False}) }}
{{ templateMemTab.render({'config': {}, 'node': node, 'parent': None, 'title': 'Modules', 'visibility': 'public', 'kinds': ['group'], 'static': False}) }}
{{ templateMemTab.render({'config': {}, 'node': node, 'parent': None, 'title': 'Namespaces', 'visibility': 'public', 'kinds': ['namespace'], 'static': False}) }}
{{ templateMemTab.render({'config': {}, 'node': node, 'parent': None, 'title': 'Classes', 'visibility': 'public', 'kinds': ['class', 'struct', 'interface'], 'static': False}) }}

{%- for visibility in ['public'] -%}
{%- for query in [['types', ['enum', 'union', 'typedef']], ['attributes', ['variable']], ['slots', ['slot']], ['properties', ['property']], ['signals', ['signal']], ['functions', ['function']]] -%}
{%- for static in [['', False], ['static ', True]] %}
{{ templateMemTab.render({'config': {}, 'node': node, 'parent': None, 'title': query[0]|title, 'visibility': visibility, 'kinds': query[1], 'static': static[1]}) }}
{%- endfor -%}
{%- endfor -%}
{%- endfor -%}

{{ templateMemTab.render({'config': {"":""}, 'node': node, 'parent': None, 'title': 'Macros', 'visibility': 'public', 'kinds': ['define'], 'static': False}) }}

{%- for visibility in ['public'] -%}
{%- for query in [['types', ['enum', 'union', 'typedef']], ['attributes', ['variable']], ['properties', ['property']], ['slots', ['slot']], ['signals', ['signal']], ['functions', ['function']]] -%}
{%- for static in [['', False], ['static ', True]] -%}
{%- if node.has(visibility, query[1], static[1]) -%}
{%- with members = node.query(visibility, query[1], static[1]) -%}
{%- if query[0] == 'functions' -%}
{%- set members = members | filter_functions | group_overloads -%}
{%- endif -%}
{%- for member in members -%}
{{ templateMemDef.render({'config': {}, 'node': member, 'configMemDef': configMemDef}) }}
{%- endfor -%}
{%- endwith -%}
{%- endif -%}
{%- endfor -%}
{%- endfor -%}
{%- endfor -%}

{% endfilter %}